version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:14-alpine
    container_name: payflow-postgres
    environment:
      POSTGRES_DB: payflow_dev
      POSTGRES_USER: payflow
      POSTGRES_PASSWORD: payflow_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U payflow"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:6-alpine
    container_name: payflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Application Services
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: payflow-api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://payflow:payflow_password@postgres:5432/payflow_dev
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-key
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/api-gateway:/app
      - /app/node_modules
    command: npm run dev

  # Microservices
  user-service:
    build:
      context: ./backend/services/user-service
      dockerfile: Dockerfile
    container_name: payflow-user-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://payflow:payflow_password@postgres:5432/payflow_dev
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-key
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/services/user-service:/app
      - /app/node_modules

  payment-service:
    build:
      context: ./backend/services/payment-service
      dockerfile: Dockerfile
    container_name: payflow-payment-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://payflow:payflow_password@postgres:5432/payflow_dev
      - REDIS_URL=redis://redis:6379
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/services/payment-service:/app
      - /app/node_modules

  transaction-service:
    build:
      context: ./backend/services/transaction-service
      dockerfile: Dockerfile
    container_name: payflow-transaction-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://payflow:payflow_password@postgres:5432/payflow_dev
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/services/transaction-service:/app
      - /app/node_modules

  notification-service:
    build:
      context: ./backend/services/notification-service
      dockerfile: Dockerfile
    container_name: payflow-notification-service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
    volumes:
      - ./backend/services/notification-service:/app
      - /app/node_modules

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: payflow-frontend
    ports:
      - "3100:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3000
      - REACT_APP_STRIPE_PUBLISHABLE_KEY=${REACT_APP_STRIPE_PUBLISHABLE_KEY}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api-gateway

  # Development Tools
  adminer:
    image: adminer:4.8.1
    container_name: payflow-adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:latest
    container_name: payflow-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    container_name: payflow-grafana
    ports:
      - "3050:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

  # Testing Services
  mailhog:
    image: mailhog/mailhog:latest
    container_name: payflow-mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI

  # Message Queue (for advanced scenarios)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: payflow-rabbitmq
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: payflow
      RABBITMQ_DEFAULT_PASS: payflow_password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  rabbitmq_data:

networks:
  default:
    name: payflow-network